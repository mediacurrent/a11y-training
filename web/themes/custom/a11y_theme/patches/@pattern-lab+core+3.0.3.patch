diff --git a/node_modules/@pattern-lab/core/src/lib/object_factory.js b/node_modules/@pattern-lab/core/src/lib/object_factory.js
index 2b595c7..71166f6 100644
--- a/node_modules/@pattern-lab/core/src/lib/object_factory.js
+++ b/node_modules/@pattern-lab/core/src/lib/object_factory.js
@@ -39,7 +39,7 @@ const Pattern = function(relPath, data, patternlab) {
 
   // this is the unique name, subDir + fileName (sans extension)
   this.name = '';
-  if (info.hasDir) {
+  if (info.hasDir && info.dirLevel > 2) {
     let variant = '';
 
     if (this.fileName.indexOf('~') !== -1) {
@@ -76,23 +76,24 @@ const Pattern = function(relPath, data, patternlab) {
     .trim(); //this is the display name for the ui. strip numeric + hyphen prefixes
 
   //00-atoms if needed
-  this.patternType = this.getDirLevel(0, info);
+  this.patternType = this.getDirLevel(0);
 
   // the top-level pattern group this pattern belongs to. 'atoms'
   this.patternGroup = this.patternType.replace(patternPrefixMatcher, '');
 
   //00-colors if needed
-  this.patternSubType = this.getDirLevel(1, info);
+  this.patternSubType = this.getDirLevel(1);
 
   // the sub-group this pattern belongs to.
   this.patternSubGroup = this.patternSubType.replace(patternPrefixMatcher, ''); // 'global'
 
   // the joined pattern group and subgroup directory
-  this.flatPatternPath = info.hasDir
-    ? this.subdir
-        .replace(/[/\\]/g, '-')
-        .replace(new RegExp('-' + info.dir + '$'), '')
-    : this.subdir.replace(/[\/\\]/g, '-'); // '00-atoms-00-global'
+  this.flatPatternPath =
+    info.hasDir && info.dirLevel > 2
+      ? this.subdir
+          .replace(/[/\\]/g, '-')
+          .replace(new RegExp('-' + info.dir + '$'), '')
+      : this.subdir.replace(/[\/\\]/g, '-'); // '00-atoms-00-global'
 
   // calculated path from the root of the public directory to the generated
   // (rendered!) html file for this pattern, to be shown in the iframe
@@ -155,10 +156,10 @@ Pattern.prototype = {
         partials
       );
       return promise
-        .then(results => {
+        .then((results) => {
           return results;
         })
-        .catch(reason => {
+        .catch((reason) => {
           return Promise.reject(reason);
         });
     }
@@ -214,11 +215,8 @@ Pattern.prototype = {
     return this.engine.findPartial(partialString);
   },
 
-  getDirLevel: function(level, info) {
+  getDirLevel: function(level) {
     const items = this.subdir.split(path.sep);
-    if (info.hasDir) {
-      items.pop();
-    }
 
     if (items[level]) {
       return items[level];
@@ -227,7 +225,7 @@ Pattern.prototype = {
     } else {
       return '';
     }
-  },
+  }
 };
 
 // Pattern static methods
@@ -259,10 +257,10 @@ Pattern.create = function(relPath, data, customProps, patternlab) {
 const CompileState = {
   NEEDS_REBUILD: 'needs rebuild',
   BUILDING: 'building',
-  CLEAN: 'clean',
+  CLEAN: 'clean'
 };
 
 module.exports = {
   Pattern: Pattern,
-  CompileState: CompileState,
+  CompileState: CompileState
 };
